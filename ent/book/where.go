// Code generated by ent, DO NOT EDIT.

package book

import (
	"bookstore/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// AuthorName applies equality check predicate on the "authorName" field. It's identical to AuthorNameEQ.
func AuthorName(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthorName, v))
}

// IsApproved applies equality check predicate on the "isApproved" field. It's identical to IsApprovedEQ.
func IsApproved(v bool) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsApproved, v))
}

// CoverPath applies equality check predicate on the "coverPath" field. It's identical to CoverPathEQ.
func CoverPath(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverPath, v))
}

// PdfPath applies equality check predicate on the "pdfPath" field. It's identical to PdfPathEQ.
func PdfPath(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPdfPath, v))
}

// CreatedBy applies equality check predicate on the "createdBy" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCreatedBy, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// NoSale applies equality check predicate on the "noSale" field. It's identical to NoSaleEQ.
func NoSale(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldNoSale, v))
}

// NoView applies equality check predicate on the "noView" field. It's identical to NoViewEQ.
func NoView(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldNoView, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDescription, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// AuthorNameEQ applies the EQ predicate on the "authorName" field.
func AuthorNameEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorNameNEQ applies the NEQ predicate on the "authorName" field.
func AuthorNameNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthorName, v))
}

// AuthorNameIn applies the In predicate on the "authorName" field.
func AuthorNameIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthorName, vs...))
}

// AuthorNameNotIn applies the NotIn predicate on the "authorName" field.
func AuthorNameNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthorName, vs...))
}

// AuthorNameGT applies the GT predicate on the "authorName" field.
func AuthorNameGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthorName, v))
}

// AuthorNameGTE applies the GTE predicate on the "authorName" field.
func AuthorNameGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthorName, v))
}

// AuthorNameLT applies the LT predicate on the "authorName" field.
func AuthorNameLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthorName, v))
}

// AuthorNameLTE applies the LTE predicate on the "authorName" field.
func AuthorNameLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthorName, v))
}

// AuthorNameContains applies the Contains predicate on the "authorName" field.
func AuthorNameContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthorName, v))
}

// AuthorNameHasPrefix applies the HasPrefix predicate on the "authorName" field.
func AuthorNameHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthorName, v))
}

// AuthorNameHasSuffix applies the HasSuffix predicate on the "authorName" field.
func AuthorNameHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthorName, v))
}

// AuthorNameEqualFold applies the EqualFold predicate on the "authorName" field.
func AuthorNameEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthorName, v))
}

// AuthorNameContainsFold applies the ContainsFold predicate on the "authorName" field.
func AuthorNameContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthorName, v))
}

// IsApprovedEQ applies the EQ predicate on the "isApproved" field.
func IsApprovedEQ(v bool) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsApproved, v))
}

// IsApprovedNEQ applies the NEQ predicate on the "isApproved" field.
func IsApprovedNEQ(v bool) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldIsApproved, v))
}

// CoverPathEQ applies the EQ predicate on the "coverPath" field.
func CoverPathEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverPath, v))
}

// CoverPathNEQ applies the NEQ predicate on the "coverPath" field.
func CoverPathNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCoverPath, v))
}

// CoverPathIn applies the In predicate on the "coverPath" field.
func CoverPathIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCoverPath, vs...))
}

// CoverPathNotIn applies the NotIn predicate on the "coverPath" field.
func CoverPathNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCoverPath, vs...))
}

// CoverPathGT applies the GT predicate on the "coverPath" field.
func CoverPathGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCoverPath, v))
}

// CoverPathGTE applies the GTE predicate on the "coverPath" field.
func CoverPathGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCoverPath, v))
}

// CoverPathLT applies the LT predicate on the "coverPath" field.
func CoverPathLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCoverPath, v))
}

// CoverPathLTE applies the LTE predicate on the "coverPath" field.
func CoverPathLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCoverPath, v))
}

// CoverPathContains applies the Contains predicate on the "coverPath" field.
func CoverPathContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCoverPath, v))
}

// CoverPathHasPrefix applies the HasPrefix predicate on the "coverPath" field.
func CoverPathHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCoverPath, v))
}

// CoverPathHasSuffix applies the HasSuffix predicate on the "coverPath" field.
func CoverPathHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCoverPath, v))
}

// CoverPathEqualFold applies the EqualFold predicate on the "coverPath" field.
func CoverPathEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCoverPath, v))
}

// CoverPathContainsFold applies the ContainsFold predicate on the "coverPath" field.
func CoverPathContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCoverPath, v))
}

// PdfPathEQ applies the EQ predicate on the "pdfPath" field.
func PdfPathEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPdfPath, v))
}

// PdfPathNEQ applies the NEQ predicate on the "pdfPath" field.
func PdfPathNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPdfPath, v))
}

// PdfPathIn applies the In predicate on the "pdfPath" field.
func PdfPathIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPdfPath, vs...))
}

// PdfPathNotIn applies the NotIn predicate on the "pdfPath" field.
func PdfPathNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPdfPath, vs...))
}

// PdfPathGT applies the GT predicate on the "pdfPath" field.
func PdfPathGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPdfPath, v))
}

// PdfPathGTE applies the GTE predicate on the "pdfPath" field.
func PdfPathGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPdfPath, v))
}

// PdfPathLT applies the LT predicate on the "pdfPath" field.
func PdfPathLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPdfPath, v))
}

// PdfPathLTE applies the LTE predicate on the "pdfPath" field.
func PdfPathLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPdfPath, v))
}

// PdfPathContains applies the Contains predicate on the "pdfPath" field.
func PdfPathContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPdfPath, v))
}

// PdfPathHasPrefix applies the HasPrefix predicate on the "pdfPath" field.
func PdfPathHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPdfPath, v))
}

// PdfPathHasSuffix applies the HasSuffix predicate on the "pdfPath" field.
func PdfPathHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPdfPath, v))
}

// PdfPathEqualFold applies the EqualFold predicate on the "pdfPath" field.
func PdfPathEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPdfPath, v))
}

// PdfPathContainsFold applies the ContainsFold predicate on the "pdfPath" field.
func PdfPathContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPdfPath, v))
}

// CreatedByEQ applies the EQ predicate on the "createdBy" field.
func CreatedByEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "createdBy" field.
func CreatedByNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "createdBy" field.
func CreatedByIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "createdBy" field.
func CreatedByNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByIsNil applies the IsNil predicate on the "createdBy" field.
func CreatedByIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "createdBy" field.
func CreatedByNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldCreatedBy))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPrice, v))
}

// NoSaleEQ applies the EQ predicate on the "noSale" field.
func NoSaleEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldNoSale, v))
}

// NoSaleNEQ applies the NEQ predicate on the "noSale" field.
func NoSaleNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldNoSale, v))
}

// NoSaleIn applies the In predicate on the "noSale" field.
func NoSaleIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldNoSale, vs...))
}

// NoSaleNotIn applies the NotIn predicate on the "noSale" field.
func NoSaleNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldNoSale, vs...))
}

// NoSaleGT applies the GT predicate on the "noSale" field.
func NoSaleGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldNoSale, v))
}

// NoSaleGTE applies the GTE predicate on the "noSale" field.
func NoSaleGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldNoSale, v))
}

// NoSaleLT applies the LT predicate on the "noSale" field.
func NoSaleLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldNoSale, v))
}

// NoSaleLTE applies the LTE predicate on the "noSale" field.
func NoSaleLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldNoSale, v))
}

// NoViewEQ applies the EQ predicate on the "noView" field.
func NoViewEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldNoView, v))
}

// NoViewNEQ applies the NEQ predicate on the "noView" field.
func NoViewNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldNoView, v))
}

// NoViewIn applies the In predicate on the "noView" field.
func NoViewIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldNoView, vs...))
}

// NoViewNotIn applies the NotIn predicate on the "noView" field.
func NoViewNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldNoView, vs...))
}

// NoViewGT applies the GT predicate on the "noView" field.
func NoViewGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldNoView, v))
}

// NoViewGTE applies the GTE predicate on the "noView" field.
func NoViewGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldNoView, v))
}

// NoViewLT applies the LT predicate on the "noView" field.
func NoViewLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldNoView, v))
}

// NoViewLTE applies the LTE predicate on the "noView" field.
func NoViewLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldNoView, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldDescription, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCategory applies the HasEdge predicate on the "category" edge.
func HasCategory() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CategoryTable, CategoryPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCategoryWith applies the HasEdge predicate on the "category" edge with a given conditions (other predicates).
func HasCategoryWith(preds ...predicate.Category) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		p(s.Not())
	})
}
