// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bookstore/ent/book"
	"bookstore/ent/category"
	"bookstore/ent/predicate"
	"bookstore/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetAuthorName sets the "authorName" field.
func (bu *BookUpdate) SetAuthorName(s string) *BookUpdate {
	bu.mutation.SetAuthorName(s)
	return bu
}

// SetIsApproved sets the "isApproved" field.
func (bu *BookUpdate) SetIsApproved(b bool) *BookUpdate {
	bu.mutation.SetIsApproved(b)
	return bu
}

// SetNillableIsApproved sets the "isApproved" field if the given value is not nil.
func (bu *BookUpdate) SetNillableIsApproved(b *bool) *BookUpdate {
	if b != nil {
		bu.SetIsApproved(*b)
	}
	return bu
}

// SetCoverPath sets the "coverPath" field.
func (bu *BookUpdate) SetCoverPath(s string) *BookUpdate {
	bu.mutation.SetCoverPath(s)
	return bu
}

// SetPdfPath sets the "pdfPath" field.
func (bu *BookUpdate) SetPdfPath(s string) *BookUpdate {
	bu.mutation.SetPdfPath(s)
	return bu
}

// SetCreatedBy sets the "createdBy" field.
func (bu *BookUpdate) SetCreatedBy(i int) *BookUpdate {
	bu.mutation.SetCreatedBy(i)
	return bu
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCreatedBy(i *int) *BookUpdate {
	if i != nil {
		bu.SetCreatedBy(*i)
	}
	return bu
}

// ClearCreatedBy clears the value of the "createdBy" field.
func (bu *BookUpdate) ClearCreatedBy() *BookUpdate {
	bu.mutation.ClearCreatedBy()
	return bu
}

// SetPrice sets the "price" field.
func (bu *BookUpdate) SetPrice(f float64) *BookUpdate {
	bu.mutation.ResetPrice()
	bu.mutation.SetPrice(f)
	return bu
}

// AddPrice adds f to the "price" field.
func (bu *BookUpdate) AddPrice(f float64) *BookUpdate {
	bu.mutation.AddPrice(f)
	return bu
}

// SetNoSale sets the "noSale" field.
func (bu *BookUpdate) SetNoSale(i int) *BookUpdate {
	bu.mutation.ResetNoSale()
	bu.mutation.SetNoSale(i)
	return bu
}

// SetNillableNoSale sets the "noSale" field if the given value is not nil.
func (bu *BookUpdate) SetNillableNoSale(i *int) *BookUpdate {
	if i != nil {
		bu.SetNoSale(*i)
	}
	return bu
}

// AddNoSale adds i to the "noSale" field.
func (bu *BookUpdate) AddNoSale(i int) *BookUpdate {
	bu.mutation.AddNoSale(i)
	return bu
}

// SetNoView sets the "noView" field.
func (bu *BookUpdate) SetNoView(i int) *BookUpdate {
	bu.mutation.ResetNoView()
	bu.mutation.SetNoView(i)
	return bu
}

// SetNillableNoView sets the "noView" field if the given value is not nil.
func (bu *BookUpdate) SetNillableNoView(i *int) *BookUpdate {
	if i != nil {
		bu.SetNoView(*i)
	}
	return bu
}

// AddNoView adds i to the "noView" field.
func (bu *BookUpdate) AddNoView(i int) *BookUpdate {
	bu.mutation.AddNoView(i)
	return bu
}

// SetDescription sets the "description" field.
func (bu *BookUpdate) SetDescription(s string) *BookUpdate {
	bu.mutation.SetDescription(s)
	return bu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bu *BookUpdate) SetUserID(id int) *BookUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableUserID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the "user" edge to the User entity.
func (bu *BookUpdate) SetUser(u *User) *BookUpdate {
	return bu.SetUserID(u.ID)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (bu *BookUpdate) AddCategoryIDs(ids ...int) *BookUpdate {
	bu.mutation.AddCategoryIDs(ids...)
	return bu
}

// AddCategory adds the "category" edges to the Category entity.
func (bu *BookUpdate) AddCategory(c ...*Category) *BookUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.AddCategoryIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bu *BookUpdate) ClearUser() *BookUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearCategory clears all "category" edges to the Category entity.
func (bu *BookUpdate) ClearCategory() *BookUpdate {
	bu.mutation.ClearCategory()
	return bu
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (bu *BookUpdate) RemoveCategoryIDs(ids ...int) *BookUpdate {
	bu.mutation.RemoveCategoryIDs(ids...)
	return bu
}

// RemoveCategory removes "category" edges to Category entities.
func (bu *BookUpdate) RemoveCategory(c ...*Category) *BookUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return bu.RemoveCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.AuthorName(); ok {
		_spec.SetField(book.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := bu.mutation.IsApproved(); ok {
		_spec.SetField(book.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := bu.mutation.CoverPath(); ok {
		_spec.SetField(book.FieldCoverPath, field.TypeString, value)
	}
	if value, ok := bu.mutation.PdfPath(); ok {
		_spec.SetField(book.FieldPdfPath, field.TypeString, value)
	}
	if value, ok := bu.mutation.Price(); ok {
		_spec.SetField(book.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedPrice(); ok {
		_spec.AddField(book.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.NoSale(); ok {
		_spec.SetField(book.FieldNoSale, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedNoSale(); ok {
		_spec.AddField(book.FieldNoSale, field.TypeInt, value)
	}
	if value, ok := bu.mutation.NoView(); ok {
		_spec.SetField(book.FieldNoView, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedNoView(); ok {
		_spec.AddField(book.FieldNoView, field.TypeInt, value)
	}
	if value, ok := bu.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !bu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetTitle sets the "title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetAuthorName sets the "authorName" field.
func (buo *BookUpdateOne) SetAuthorName(s string) *BookUpdateOne {
	buo.mutation.SetAuthorName(s)
	return buo
}

// SetIsApproved sets the "isApproved" field.
func (buo *BookUpdateOne) SetIsApproved(b bool) *BookUpdateOne {
	buo.mutation.SetIsApproved(b)
	return buo
}

// SetNillableIsApproved sets the "isApproved" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableIsApproved(b *bool) *BookUpdateOne {
	if b != nil {
		buo.SetIsApproved(*b)
	}
	return buo
}

// SetCoverPath sets the "coverPath" field.
func (buo *BookUpdateOne) SetCoverPath(s string) *BookUpdateOne {
	buo.mutation.SetCoverPath(s)
	return buo
}

// SetPdfPath sets the "pdfPath" field.
func (buo *BookUpdateOne) SetPdfPath(s string) *BookUpdateOne {
	buo.mutation.SetPdfPath(s)
	return buo
}

// SetCreatedBy sets the "createdBy" field.
func (buo *BookUpdateOne) SetCreatedBy(i int) *BookUpdateOne {
	buo.mutation.SetCreatedBy(i)
	return buo
}

// SetNillableCreatedBy sets the "createdBy" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCreatedBy(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetCreatedBy(*i)
	}
	return buo
}

// ClearCreatedBy clears the value of the "createdBy" field.
func (buo *BookUpdateOne) ClearCreatedBy() *BookUpdateOne {
	buo.mutation.ClearCreatedBy()
	return buo
}

// SetPrice sets the "price" field.
func (buo *BookUpdateOne) SetPrice(f float64) *BookUpdateOne {
	buo.mutation.ResetPrice()
	buo.mutation.SetPrice(f)
	return buo
}

// AddPrice adds f to the "price" field.
func (buo *BookUpdateOne) AddPrice(f float64) *BookUpdateOne {
	buo.mutation.AddPrice(f)
	return buo
}

// SetNoSale sets the "noSale" field.
func (buo *BookUpdateOne) SetNoSale(i int) *BookUpdateOne {
	buo.mutation.ResetNoSale()
	buo.mutation.SetNoSale(i)
	return buo
}

// SetNillableNoSale sets the "noSale" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableNoSale(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetNoSale(*i)
	}
	return buo
}

// AddNoSale adds i to the "noSale" field.
func (buo *BookUpdateOne) AddNoSale(i int) *BookUpdateOne {
	buo.mutation.AddNoSale(i)
	return buo
}

// SetNoView sets the "noView" field.
func (buo *BookUpdateOne) SetNoView(i int) *BookUpdateOne {
	buo.mutation.ResetNoView()
	buo.mutation.SetNoView(i)
	return buo
}

// SetNillableNoView sets the "noView" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableNoView(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetNoView(*i)
	}
	return buo
}

// AddNoView adds i to the "noView" field.
func (buo *BookUpdateOne) AddNoView(i int) *BookUpdateOne {
	buo.mutation.AddNoView(i)
	return buo
}

// SetDescription sets the "description" field.
func (buo *BookUpdateOne) SetDescription(s string) *BookUpdateOne {
	buo.mutation.SetDescription(s)
	return buo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (buo *BookUpdateOne) SetUserID(id int) *BookUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableUserID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the "user" edge to the User entity.
func (buo *BookUpdateOne) SetUser(u *User) *BookUpdateOne {
	return buo.SetUserID(u.ID)
}

// AddCategoryIDs adds the "category" edge to the Category entity by IDs.
func (buo *BookUpdateOne) AddCategoryIDs(ids ...int) *BookUpdateOne {
	buo.mutation.AddCategoryIDs(ids...)
	return buo
}

// AddCategory adds the "category" edges to the Category entity.
func (buo *BookUpdateOne) AddCategory(c ...*Category) *BookUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.AddCategoryIDs(ids...)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (buo *BookUpdateOne) ClearUser() *BookUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearCategory clears all "category" edges to the Category entity.
func (buo *BookUpdateOne) ClearCategory() *BookUpdateOne {
	buo.mutation.ClearCategory()
	return buo
}

// RemoveCategoryIDs removes the "category" edge to Category entities by IDs.
func (buo *BookUpdateOne) RemoveCategoryIDs(ids ...int) *BookUpdateOne {
	buo.mutation.RemoveCategoryIDs(ids...)
	return buo
}

// RemoveCategory removes "category" edges to Category entities.
func (buo *BookUpdateOne) RemoveCategory(c ...*Category) *BookUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return buo.RemoveCategoryIDs(ids...)
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.AuthorName(); ok {
		_spec.SetField(book.FieldAuthorName, field.TypeString, value)
	}
	if value, ok := buo.mutation.IsApproved(); ok {
		_spec.SetField(book.FieldIsApproved, field.TypeBool, value)
	}
	if value, ok := buo.mutation.CoverPath(); ok {
		_spec.SetField(book.FieldCoverPath, field.TypeString, value)
	}
	if value, ok := buo.mutation.PdfPath(); ok {
		_spec.SetField(book.FieldPdfPath, field.TypeString, value)
	}
	if value, ok := buo.mutation.Price(); ok {
		_spec.SetField(book.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedPrice(); ok {
		_spec.AddField(book.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.NoSale(); ok {
		_spec.SetField(book.FieldNoSale, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedNoSale(); ok {
		_spec.AddField(book.FieldNoSale, field.TypeInt, value)
	}
	if value, ok := buo.mutation.NoView(); ok {
		_spec.SetField(book.FieldNoView, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedNoView(); ok {
		_spec.AddField(book.FieldNoView, field.TypeInt, value)
	}
	if value, ok := buo.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.UserTable,
			Columns: []string{book.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCategoryIDs(); len(nodes) > 0 && !buo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   book.CategoryTable,
			Columns: book.CategoryPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
