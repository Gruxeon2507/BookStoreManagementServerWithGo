// Code generated by ent, DO NOT EDIT.

package feature

import (
	"bookstore/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Feature {
	return predicate.Feature(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Feature {
	return predicate.Feature(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Feature {
	return predicate.Feature(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Feature {
	return predicate.Feature(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Feature {
	return predicate.Feature(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Feature {
	return predicate.Feature(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Feature {
	return predicate.Feature(sql.FieldLTE(FieldID, id))
}

// FeatureName applies equality check predicate on the "featureName" field. It's identical to FeatureNameEQ.
func FeatureName(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldFeatureName, v))
}

// FeatureUrl applies equality check predicate on the "featureUrl" field. It's identical to FeatureUrlEQ.
func FeatureUrl(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldFeatureUrl, v))
}

// FeatureNameEQ applies the EQ predicate on the "featureName" field.
func FeatureNameEQ(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldFeatureName, v))
}

// FeatureNameNEQ applies the NEQ predicate on the "featureName" field.
func FeatureNameNEQ(v string) predicate.Feature {
	return predicate.Feature(sql.FieldNEQ(FieldFeatureName, v))
}

// FeatureNameIn applies the In predicate on the "featureName" field.
func FeatureNameIn(vs ...string) predicate.Feature {
	return predicate.Feature(sql.FieldIn(FieldFeatureName, vs...))
}

// FeatureNameNotIn applies the NotIn predicate on the "featureName" field.
func FeatureNameNotIn(vs ...string) predicate.Feature {
	return predicate.Feature(sql.FieldNotIn(FieldFeatureName, vs...))
}

// FeatureNameGT applies the GT predicate on the "featureName" field.
func FeatureNameGT(v string) predicate.Feature {
	return predicate.Feature(sql.FieldGT(FieldFeatureName, v))
}

// FeatureNameGTE applies the GTE predicate on the "featureName" field.
func FeatureNameGTE(v string) predicate.Feature {
	return predicate.Feature(sql.FieldGTE(FieldFeatureName, v))
}

// FeatureNameLT applies the LT predicate on the "featureName" field.
func FeatureNameLT(v string) predicate.Feature {
	return predicate.Feature(sql.FieldLT(FieldFeatureName, v))
}

// FeatureNameLTE applies the LTE predicate on the "featureName" field.
func FeatureNameLTE(v string) predicate.Feature {
	return predicate.Feature(sql.FieldLTE(FieldFeatureName, v))
}

// FeatureNameContains applies the Contains predicate on the "featureName" field.
func FeatureNameContains(v string) predicate.Feature {
	return predicate.Feature(sql.FieldContains(FieldFeatureName, v))
}

// FeatureNameHasPrefix applies the HasPrefix predicate on the "featureName" field.
func FeatureNameHasPrefix(v string) predicate.Feature {
	return predicate.Feature(sql.FieldHasPrefix(FieldFeatureName, v))
}

// FeatureNameHasSuffix applies the HasSuffix predicate on the "featureName" field.
func FeatureNameHasSuffix(v string) predicate.Feature {
	return predicate.Feature(sql.FieldHasSuffix(FieldFeatureName, v))
}

// FeatureNameEqualFold applies the EqualFold predicate on the "featureName" field.
func FeatureNameEqualFold(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEqualFold(FieldFeatureName, v))
}

// FeatureNameContainsFold applies the ContainsFold predicate on the "featureName" field.
func FeatureNameContainsFold(v string) predicate.Feature {
	return predicate.Feature(sql.FieldContainsFold(FieldFeatureName, v))
}

// FeatureUrlEQ applies the EQ predicate on the "featureUrl" field.
func FeatureUrlEQ(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEQ(FieldFeatureUrl, v))
}

// FeatureUrlNEQ applies the NEQ predicate on the "featureUrl" field.
func FeatureUrlNEQ(v string) predicate.Feature {
	return predicate.Feature(sql.FieldNEQ(FieldFeatureUrl, v))
}

// FeatureUrlIn applies the In predicate on the "featureUrl" field.
func FeatureUrlIn(vs ...string) predicate.Feature {
	return predicate.Feature(sql.FieldIn(FieldFeatureUrl, vs...))
}

// FeatureUrlNotIn applies the NotIn predicate on the "featureUrl" field.
func FeatureUrlNotIn(vs ...string) predicate.Feature {
	return predicate.Feature(sql.FieldNotIn(FieldFeatureUrl, vs...))
}

// FeatureUrlGT applies the GT predicate on the "featureUrl" field.
func FeatureUrlGT(v string) predicate.Feature {
	return predicate.Feature(sql.FieldGT(FieldFeatureUrl, v))
}

// FeatureUrlGTE applies the GTE predicate on the "featureUrl" field.
func FeatureUrlGTE(v string) predicate.Feature {
	return predicate.Feature(sql.FieldGTE(FieldFeatureUrl, v))
}

// FeatureUrlLT applies the LT predicate on the "featureUrl" field.
func FeatureUrlLT(v string) predicate.Feature {
	return predicate.Feature(sql.FieldLT(FieldFeatureUrl, v))
}

// FeatureUrlLTE applies the LTE predicate on the "featureUrl" field.
func FeatureUrlLTE(v string) predicate.Feature {
	return predicate.Feature(sql.FieldLTE(FieldFeatureUrl, v))
}

// FeatureUrlContains applies the Contains predicate on the "featureUrl" field.
func FeatureUrlContains(v string) predicate.Feature {
	return predicate.Feature(sql.FieldContains(FieldFeatureUrl, v))
}

// FeatureUrlHasPrefix applies the HasPrefix predicate on the "featureUrl" field.
func FeatureUrlHasPrefix(v string) predicate.Feature {
	return predicate.Feature(sql.FieldHasPrefix(FieldFeatureUrl, v))
}

// FeatureUrlHasSuffix applies the HasSuffix predicate on the "featureUrl" field.
func FeatureUrlHasSuffix(v string) predicate.Feature {
	return predicate.Feature(sql.FieldHasSuffix(FieldFeatureUrl, v))
}

// FeatureUrlEqualFold applies the EqualFold predicate on the "featureUrl" field.
func FeatureUrlEqualFold(v string) predicate.Feature {
	return predicate.Feature(sql.FieldEqualFold(FieldFeatureUrl, v))
}

// FeatureUrlContainsFold applies the ContainsFold predicate on the "featureUrl" field.
func FeatureUrlContainsFold(v string) predicate.Feature {
	return predicate.Feature(sql.FieldContainsFold(FieldFeatureUrl, v))
}

// HasRole applies the HasEdge predicate on the "role" edge.
func HasRole() predicate.Feature {
	return predicate.Feature(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RoleTable, RolePrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoleWith applies the HasEdge predicate on the "role" edge with a given conditions (other predicates).
func HasRoleWith(preds ...predicate.Role) predicate.Feature {
	return predicate.Feature(func(s *sql.Selector) {
		step := newRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Feature) predicate.Feature {
	return predicate.Feature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Feature) predicate.Feature {
	return predicate.Feature(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Feature) predicate.Feature {
	return predicate.Feature(func(s *sql.Selector) {
		p(s.Not())
	})
}
