// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BooksColumns holds the columns for the "books" table.
	BooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "author_name", Type: field.TypeString},
		{Name: "is_approved", Type: field.TypeBool, Default: false},
		{Name: "cover_path", Type: field.TypeString},
		{Name: "pdf_path", Type: field.TypeString},
		{Name: "price", Type: field.TypeFloat64},
		{Name: "no_sale", Type: field.TypeInt, Default: 0},
		{Name: "no_view", Type: field.TypeInt, Default: 0},
		{Name: "description", Type: field.TypeString},
		{Name: "created_by", Type: field.TypeInt, Nullable: true},
	}
	// BooksTable holds the schema information for the "books" table.
	BooksTable = &schema.Table{
		Name:       "books",
		Columns:    BooksColumns,
		PrimaryKey: []*schema.Column{BooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "books_users_createdBy",
				Columns:    []*schema.Column{BooksColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "category_name", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// FeaturesColumns holds the columns for the "features" table.
	FeaturesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "feature_name", Type: field.TypeString},
		{Name: "feature_url", Type: field.TypeString},
	}
	// FeaturesTable holds the schema information for the "features" table.
	FeaturesTable = &schema.Table{
		Name:       "features",
		Columns:    FeaturesColumns,
		PrimaryKey: []*schema.Column{FeaturesColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "role_name", Type: field.TypeString},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString},
		{Name: "dob", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "created_date", Type: field.TypeTime},
		{Name: "avatar_path", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// BookCategoryColumns holds the columns for the "book_category" table.
	BookCategoryColumns = []*schema.Column{
		{Name: "book_id", Type: field.TypeInt},
		{Name: "category_id", Type: field.TypeInt},
	}
	// BookCategoryTable holds the schema information for the "book_category" table.
	BookCategoryTable = &schema.Table{
		Name:       "book_category",
		Columns:    BookCategoryColumns,
		PrimaryKey: []*schema.Column{BookCategoryColumns[0], BookCategoryColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "book_category_book_id",
				Columns:    []*schema.Column{BookCategoryColumns[0]},
				RefColumns: []*schema.Column{BooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "book_category_category_id",
				Columns:    []*schema.Column{BookCategoryColumns[1]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleUserColumns holds the columns for the "role_user" table.
	RoleUserColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// RoleUserTable holds the schema information for the "role_user" table.
	RoleUserTable = &schema.Table{
		Name:       "role_user",
		Columns:    RoleUserColumns,
		PrimaryKey: []*schema.Column{RoleUserColumns[0], RoleUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_user_role_id",
				Columns:    []*schema.Column{RoleUserColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_user_user_id",
				Columns:    []*schema.Column{RoleUserColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleFeatureColumns holds the columns for the "role_feature" table.
	RoleFeatureColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeInt},
		{Name: "feature_id", Type: field.TypeInt},
	}
	// RoleFeatureTable holds the schema information for the "role_feature" table.
	RoleFeatureTable = &schema.Table{
		Name:       "role_feature",
		Columns:    RoleFeatureColumns,
		PrimaryKey: []*schema.Column{RoleFeatureColumns[0], RoleFeatureColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_feature_role_id",
				Columns:    []*schema.Column{RoleFeatureColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_feature_feature_id",
				Columns:    []*schema.Column{RoleFeatureColumns[1]},
				RefColumns: []*schema.Column{FeaturesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BooksTable,
		CategoriesTable,
		FeaturesTable,
		RolesTable,
		UsersTable,
		BookCategoryTable,
		RoleUserTable,
		RoleFeatureTable,
	}
)

func init() {
	BooksTable.ForeignKeys[0].RefTable = UsersTable
	BookCategoryTable.ForeignKeys[0].RefTable = BooksTable
	BookCategoryTable.ForeignKeys[1].RefTable = CategoriesTable
	RoleUserTable.ForeignKeys[0].RefTable = RolesTable
	RoleUserTable.ForeignKeys[1].RefTable = UsersTable
	RoleFeatureTable.ForeignKeys[0].RefTable = RolesTable
	RoleFeatureTable.ForeignKeys[1].RefTable = FeaturesTable
}
