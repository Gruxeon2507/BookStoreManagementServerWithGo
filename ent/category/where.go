// Code generated by ent, DO NOT EDIT.

package category

import (
	"bookstore/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldID, id))
}

// CategoryName applies equality check predicate on the "categoryName" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameEQ applies the EQ predicate on the "categoryName" field.
func CategoryNameEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameNEQ applies the NEQ predicate on the "categoryName" field.
func CategoryNameNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryName, v))
}

// CategoryNameIn applies the In predicate on the "categoryName" field.
func CategoryNameIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryName, vs...))
}

// CategoryNameNotIn applies the NotIn predicate on the "categoryName" field.
func CategoryNameNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryName, vs...))
}

// CategoryNameGT applies the GT predicate on the "categoryName" field.
func CategoryNameGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryName, v))
}

// CategoryNameGTE applies the GTE predicate on the "categoryName" field.
func CategoryNameGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryName, v))
}

// CategoryNameLT applies the LT predicate on the "categoryName" field.
func CategoryNameLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryName, v))
}

// CategoryNameLTE applies the LTE predicate on the "categoryName" field.
func CategoryNameLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryName, v))
}

// CategoryNameContains applies the Contains predicate on the "categoryName" field.
func CategoryNameContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCategoryName, v))
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "categoryName" field.
func CategoryNameHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCategoryName, v))
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "categoryName" field.
func CategoryNameHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCategoryName, v))
}

// CategoryNameEqualFold applies the EqualFold predicate on the "categoryName" field.
func CategoryNameEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCategoryName, v))
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "categoryName" field.
func CategoryNameContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCategoryName, v))
}

// HasBook applies the HasEdge predicate on the "book" edge.
func HasBook() predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, BookTable, BookPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookWith applies the HasEdge predicate on the "book" edge with a given conditions (other predicates).
func HasBookWith(preds ...predicate.Book) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := newBookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		p(s.Not())
	})
}
