// Code generated by ent, DO NOT EDIT.

package ent

import (
	"bookstore/ent/book"
	"bookstore/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// AuthorName holds the value of the "authorName" field.
	AuthorName string `json:"authorName,omitempty"`
	// IsApproved holds the value of the "isApproved" field.
	IsApproved bool `json:"isApproved,omitempty"`
	// CoverPath holds the value of the "coverPath" field.
	CoverPath string `json:"coverPath,omitempty"`
	// PdfPath holds the value of the "pdfPath" field.
	PdfPath string `json:"pdfPath,omitempty"`
	// CreatedBy holds the value of the "createdBy" field.
	CreatedBy int `json:"createdBy,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// NoSale holds the value of the "noSale" field.
	NoSale int `json:"noSale,omitempty"`
	// NoView holds the value of the "noView" field.
	NoView int `json:"noView,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges        BookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Category holds the value of the category edge.
	Category []*Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading.
func (e BookEdges) CategoryOrErr() ([]*Category, error) {
	if e.loadedTypes[1] {
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldIsApproved:
			values[i] = new(sql.NullBool)
		case book.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case book.FieldID, book.FieldCreatedBy, book.FieldNoSale, book.FieldNoView:
			values[i] = new(sql.NullInt64)
		case book.FieldTitle, book.FieldAuthorName, book.FieldCoverPath, book.FieldPdfPath, book.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field authorName", values[i])
			} else if value.Valid {
				b.AuthorName = value.String
			}
		case book.FieldIsApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isApproved", values[i])
			} else if value.Valid {
				b.IsApproved = value.Bool
			}
		case book.FieldCoverPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coverPath", values[i])
			} else if value.Valid {
				b.CoverPath = value.String
			}
		case book.FieldPdfPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pdfPath", values[i])
			} else if value.Valid {
				b.PdfPath = value.String
			}
		case book.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field createdBy", values[i])
			} else if value.Valid {
				b.CreatedBy = int(value.Int64)
			}
		case book.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				b.Price = value.Float64
			}
		case book.FieldNoSale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field noSale", values[i])
			} else if value.Valid {
				b.NoSale = int(value.Int64)
			}
		case book.FieldNoView:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field noView", values[i])
			} else if value.Valid {
				b.NoView = int(value.Int64)
			}
		case book.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Book entity.
func (b *Book) QueryUser() *UserQuery {
	return NewBookClient(b.config).QueryUser(b)
}

// QueryCategory queries the "category" edge of the Book entity.
func (b *Book) QueryCategory() *CategoryQuery {
	return NewBookClient(b.config).QueryCategory(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("authorName=")
	builder.WriteString(b.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("isApproved=")
	builder.WriteString(fmt.Sprintf("%v", b.IsApproved))
	builder.WriteString(", ")
	builder.WriteString("coverPath=")
	builder.WriteString(b.CoverPath)
	builder.WriteString(", ")
	builder.WriteString("pdfPath=")
	builder.WriteString(b.PdfPath)
	builder.WriteString(", ")
	builder.WriteString("createdBy=")
	builder.WriteString(fmt.Sprintf("%v", b.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", b.Price))
	builder.WriteString(", ")
	builder.WriteString("noSale=")
	builder.WriteString(fmt.Sprintf("%v", b.NoSale))
	builder.WriteString(", ")
	builder.WriteString("noView=")
	builder.WriteString(fmt.Sprintf("%v", b.NoView))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book
